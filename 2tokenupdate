import requests
import time
import pandas as pd
import os
import logging
from datetime import datetime, timedelta, timezone
from tqdm import tqdm  # ✅ for progress bar


# =========================================================
# TOKEN SERVICE CLASS
# =========================================================
class SMSTokenService:
    def __init__(self, auth_url, client_id, client_secret, expire_in_seconds=1770):
        self.auth_url = auth_url
        self.client_id = client_id
        self.client_secret = client_secret
        self.expire_in = timedelta(seconds=expire_in_seconds)
        self.token = None
        self.expire_at = datetime.now(timezone.utc)

    def token_valid(self):
        return self.token is not None and datetime.now(timezone.utc) < self.expire_at

    def renew_token(self):
        if not self.token_valid():
            logging.info("[AUTH] Requesting new access token...")
            payload = {
                "grant_type": "client_credentials",
                "client_id": self.client_id,
                "client_secret": self.client_secret
            }
            try:
                response = requests.post(self.auth_url, data=payload)
                logging.info(f"[AUTH] Response Status: {response.status_code}")
                if response.status_code == 200:
                    token_data = response.json()
                    self.token = token_data.get("access_token")
                    self.expire_at = datetime.now(timezone.utc) + self.expire_in
                    logging.info("[AUTH] ✅ Access token received successfully.")
                else:
                    raise Exception(f"[AUTH ERROR] {response.status_code}: {response.text}")
            except requests.exceptions.RequestException as e:
                raise Exception(f"[AUTH ERROR] Request failed: {str(e)}")

    def get_token(self):
        self.renew_token()
        return self.token

    def get_headers(self):
        return {
            "Authorization": f"Bearer {self.get_token()}",
            "Content-Type": "application/json",
            "Accept": "application/json"
        }


# =========================================================
# MAIN CLASS - SMS DELIVERY REPORT
# =========================================================
class SMSDeliveryReport:
    def __init__(self, client_id, client_secret, api_base, input_csv, output_csv, log_dir="logs"):
        self.api_base = api_base.rstrip("/")
        self.input_csv = input_csv
        self.output_csv = output_csv
        self.auth_url = f"{self.api_base}/oauth/token"
        self.phones_url = f"{self.api_base}/phones"
        self.outbound_url = f"{self.api_base}/outbound-messages"

        # -------------------- Setup Logging --------------------
        os.makedirs(log_dir, exist_ok=True)
        log_filename = os.path.join(
            log_dir,
            f"SMS_Delivery_Report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
        )
        logging.basicConfig(
            level=logging.INFO,
            format="%(asctime)s [%(levelname)s] %(message)s",
            handlers=[
                logging.FileHandler(log_filename, encoding="utf-8"),
                logging.StreamHandler()
            ]
        )
        logging.info(f"📁 Log file created at: {log_filename}")

        # -------------------- Token Service --------------------
        self.token_service = SMSTokenService(
            auth_url=self.auth_url,
            client_id=client_id,
            client_secret=client_secret
        )

    # =========================================================
    # PHONE LOOKUP
    # =========================================================
    def get_phone_id(self, number, country_code="US"):
        headers = self.token_service.get_headers()
        params = {"number": number, "country-code": country_code}

        logging.info(f"[LOOKUP] 🔍 Checking phone number: {number}")
        try:
            response = requests.get(self.phones_url, headers=headers, params=params, timeout=20)
            logging.info(f"[LOOKUP] Status: {response.status_code}")

            if response.status_code == 200:
                phones = response.json().get("phone", [])
                if phones:
                    phone_id = phones[0]["id"]
                    logging.info(f"[LOOKUP] ✅ Found phone ID: {phone_id}")
                    return phone_id
                else:
                    logging.warning(f"[LOOKUP] ❌ No phone record found for {number}")
            else:
                logging.warning(f"[LOOKUP] ⚠️ Unexpected response: {response.status_code} - {response.text}")
        except requests.exceptions.RequestException as e:
            logging.error(f"[LOOKUP ERROR] {str(e)}")

        return None

    # =========================================================
    # OUTBOUND MESSAGE RETRIEVAL
    # =========================================================
    def get_outbound_messages(self, phone_id):
        headers = self.token_service.get_headers()
        params = {"phone-id": phone_id, "per-page": 250}

        logging.info(f"[MESSAGES] 📩 Fetching outbound messages for phone ID: {phone_id}")
        try:
            response = requests.get(self.outbound_url, headers=headers, params=params, timeout=20)
            logging.info(f"[MESSAGES] Status: {response.status_code}")

            if response.status_code == 200:
                messages = response.json().get("outbound-message", [])
                logging.info(f"[MESSAGES] Retrieved {len(messages)} messages.")
                return messages
            else:
                logging.warning(f"[MESSAGES] ⚠️ No messages found or unexpected status: {response.status_code}")
        except requests.exceptions.RequestException as e:
            logging.error(f"[MESSAGES ERROR] {str(e)}")

        return []

    # =========================================================
    # MAIN REPORT PROCESS
    # =========================================================
    def generate_report(self):
        df = pd.read_csv(self.input_csv)
        results = []
        total = len(df)
        logging.info(f"\n🚀 Starting SMS Delivery Report generation for {total} members...\n")

        # ✅ tqdm progress bar
        for _, row in tqdm(df.iterrows(), total=total, desc="Processing phones", unit="record"):
            phone = str(row["MEMBER_PHONE"]).strip()
            country = str(row.get("COUNTRY_CODE", "US")).strip()
            gmpi_id = str(row.get("GMPI_ID", "")).strip()
            first_name = str(row.get("FIRST_NAME", "")).strip()
            last_name = str(row.get("LAST_NAME", "")).strip()
            start_time = datetime.now(timezone.utc).isoformat()

            try:
                phone_id = self.get_phone_id(phone, country)
                if not phone_id:
                    results.append({
                        "GMPI_ID": gmpi_id,
                        "Phone_id": "",
                        "Phone_Number": phone,
                        "First_Name": first_name,
                        "Last_Name": last_name,
                        "Status": "NOT_FOUND",
                        "Deliver_on": "",
                        "expire_at": "",
                        "created_at": "",
                        "updated_at": "",
                        "program_id": "",
                        "template_id": "",
                        "API_CALLED_AT": start_time,
                        "DELIVERY_STATUS": "No phone record found"
                    })
                    continue

                messages = self.get_outbound_messages(phone_id)
                if not messages:
                    results.append({
                        "GMPI_ID": gmpi_id,
                        "Phone_id": phone_id,
                        "Phone_Number": phone,
                        "First_Name": first_name,
                        "Last_Name": last_name,
                        "Status": "NO_MESSAGES",
                        "Deliver_on": "",
                        "expire_at": "",
                        "created_at": "",
                        "updated_at": "",
                        "program_id": "",
                        "template_id": "",
                        "API_CALLED_AT": start_time,
                        "DELIVERY_STATUS": "No outbound messages found"
                    })
                    continue

                for msg in messages:
                    results.append({
                        "GMPI_ID": gmpi_id,
                        "Phone_id": phone_id,
                        "Phone_Number": phone,
                        "First_Name": first_name or msg.get("first_name", ""),
                        "Last_Name": last_name or msg.get("last_name", ""),
                        "Status": msg.get("status", ""),
                        "Deliver_on": msg.get("deliver_on", ""),
                        "expire_at": msg.get("expire_at", ""),
                        "created_at": msg.get("created_at", ""),
                        "updated_at": msg.get("updated_at", ""),
                        "program_id": msg.get("program_id", ""),
                        "template_id": msg.get("template_id", ""),
                        "API_CALLED_AT": start_time,
                        "DELIVERY_STATUS": msg.get("status", "")
                    })

            except Exception as e:
                logging.error(f"[ERROR] ❌ Processing {phone}: {str(e)}")
                results.append({
                    "GMPI_ID": gmpi_id,
                    "Phone_id": "",
                    "Phone_Number": phone,
                    "First_Name": first_name,
                    "Last_Name": last_name,
                    "Status": "ERROR",
                    "Deliver_on": "",
                    "expire_at": "",
                    "created_at": "",
                    "updated_at": "",
                    "program_id": "",
                    "template_id": "",
                    "API_CALLED_AT": start_time,
                    "DELIVERY_STATUS": str(e)
                })

            time.sleep(0.3)  # prevent rate limits

        # Save Output
        pd.DataFrame(results).to_csv(self.output_csv, index=False)
        logging.info(f"\n✅ SMS Delivery Report generated successfully: {self.output_csv}")


# =========================================================
# MAIN ENTRY
# =========================================================
if __name__ == "__main__":
    CLIENT_ID = "your-client-id"
    CLIENT_SECRET = "your-client-secret"
    API_BASE = "https://api.example.com/v1"
    INPUT_CSV = "Member_Phone_List.csv"
    OUTPUT_CSV = "SMS_Delivery_Report.csv"

    report = SMSDeliveryReport(
        client_id=CLIENT_ID,
        client_secret=CLIENT_SECRET,
        api_base=API_BASE,
        input_csv=INPUT_CSV,
        output_csv=OUTPUT_CSV
    )

    report.generate_report()
